digraph "Foundation/Arena.h"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",label="Foundation/Arena.h",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Implementa un asignador de memoria basado en arena, que gestiona asignaciones dinámicas de objetos en b..."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="Engine/Physic/OctTree.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_oct_tree_8h.html",tooltip="Define la clase OctTree para gestionar la partición espacial de objetos físicos mediante un árbol octal."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="Application/GravitySimulator.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_gravity_simulator_8cpp.html",tooltip=" "];
  Node2 -> Node4 [id="edge3_Node000002_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="Engine/Physic/OctTree.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_oct_tree_8cpp.html",tooltip=" "];
  Node2 -> Node5 [id="edge4_Node000002_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="Engine/Physic/OctTreeCollision\lDetection.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_oct_tree_collision_detection_8h.html",tooltip="Implementa una detección de colisiones utilizando un árbol octal (OctTree) para optimizar la simulación."];
  Node5 -> Node3 [id="edge5_Node000005_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 -> Node6 [id="edge6_Node000005_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="Engine/Physic/OctTreeCollision\lDetection.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_oct_tree_collision_detection_8cpp.html",tooltip=" "];
  Node2 -> Node7 [id="edge7_Node000002_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="Engine/Physic/OctTreeSolver.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_oct_tree_solver_8h.html",tooltip="Implementa un solver de simulación física utilizando un árbol octal para resolver las interacciones entre ob..."];
  Node7 -> Node3 [id="edge8_Node000007_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node8 [id="edge9_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="Engine/Physic/OctTreeSolver.cpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_oct_tree_solver_8cpp.html",tooltip=" "];
}

digraph "Engine/Physic/OctTreeCollisionDetection.h"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",label="Engine/Physic/OctTreeCollision\lDetection.h",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Implementa una detección de colisiones utilizando un árbol octal (OctTree) para optimizar la simulación."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="CollisionDetectionInterface.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_collision_detection_interface_8h.html",tooltip="Define una interfaz para la detección de colisiones en la simulación física."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="PhysicObject.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_physic_object_8h.html",tooltip="Define la clase PhysicObject para representar un objeto físico en la simulación, proporcionando métodos para..."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="glm/glm.hpp",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node3 -> Node5 [id="edge4_Node000003_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="../../External/json\l/json.hpp",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node2 -> Node6 [id="edge5_Node000002_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="memory",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node2 -> Node7 [id="edge6_Node000002_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="vector",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="OctTree.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_oct_tree_8h.html",tooltip="Define la clase OctTree para gestionar la partición espacial de objetos físicos mediante un árbol octal."];
  Node8 -> Node7 [id="edge8_Node000008_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node9 [id="edge9_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="limits",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node8 -> Node3 [id="edge10_Node000008_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node6 [id="edge11_Node000008_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node10 [id="edge12_Node000008_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="stack",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node8 -> Node11 [id="edge13_Node000008_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="PhysicSystem.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_physic_system_8h.html",tooltip="Gestiona la simulación física utilizando un algoritmo de detección de colisiones y un solver para actualizar ..."];
  Node11 -> Node2 [id="edge14_Node000011_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node11 -> Node12 [id="edge15_Node000011_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="SolverInterface.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_solver_interface_8h.html",tooltip="Define una interfaz para implementar métodos de resolución de la simulación física."];
  Node12 -> Node3 [id="edge16_Node000012_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node12 -> Node6 [id="edge17_Node000012_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node12 -> Node7 [id="edge18_Node000012_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node11 -> Node13 [id="edge19_Node000011_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="iostream",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node8 -> Node14 [id="edge20_Node000008_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="../../Foundation/Arena.h",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_arena_8h.html",tooltip="Implementa un asignador de memoria basado en arena, que gestiona asignaciones dinámicas de objetos en b..."];
  Node14 -> Node6 [id="edge21_Node000014_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node14 -> Node15 [id="edge22_Node000014_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="cstdlib",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
}
